@page "/user/add"
@page "/user/edit/{id:int}"
@using BlazorCRUDSqlLiteApp.Shared.Models
@inject HttpClient http
@inject NavigationManager navigationManager

<PageTitle>@Title User</PageTitle>
<h1>@Title User</h1>

<EditForm Model="@user" OnValidSubmit="saveUser">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="@user.Username"></InputText>
        </div>
        <ValidationMessage For="@(()=>user.Username)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="Address" class="form-label">Address</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="@user.Address"></InputText>
        </div>
        <ValidationMessage For="@(()=>user.Address)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="ContactNo" class="form-label">ContactNo</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="@user.Cellnumber"></InputText>
        </div>
        <ValidationMessage For="@(()=>user.Cellnumber)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="EmailId" class="form-label">EmailId</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="@user.Emailid"></InputText>
        </div>
        <ValidationMessage For="@(()=>user.Emailid)"></ValidationMessage>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    protected User user = new();
    protected string Title = "Add";

    protected override async Task OnInitializedAsync()
    {
        if (id != 0)
        {
            Title = "Edit";
            user = await http.GetFromJsonAsync<User>("api/User/GetUser/" + id);
        }
    }

    protected async Task saveUser()
    {
        if (user.Userid != 0)
        {
            await http.PutAsJsonAsync("api/User/UpdateUser", user);
        }
        else
        {
            await http.PostAsJsonAsync("api/User/AddUser", user);
        }
        Cancel();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/fetchuserdetails");
    }

}
